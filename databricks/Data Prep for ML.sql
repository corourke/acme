-- Databricks notebook source
-- MAGIC %python
-- MAGIC spark.conf.set("spark.databricks.io.cache.enabled", "true")
-- MAGIC
-- MAGIC dlh = "s3://onehouse-customer-bucket-a3a13101/datalake/acme_retail_bronze/"
-- MAGIC df_item_master = spark.read.format("delta").load(dlh + "retail_item_master/v1/")
-- MAGIC df_item_master.createOrReplaceTempView("item_master")
-- MAGIC df_retail_stores = spark.read.format("delta").load(dlh + "retail_stores/v1/")
-- MAGIC df_retail_stores.createOrReplaceTempView("stores")
-- MAGIC df_item_categories = spark.read.format("delta").load(dlh + "retail_item_categories/v1/")
-- MAGIC df_item_categories.createOrReplaceTempView("item_categories")
-- MAGIC df_batched_scans = spark.read.format("delta").load(dlh + "retail_scans/v3/")
-- MAGIC df_batched_scans.createOrReplaceTempView("scans")

-- COMMAND ----------

-- MAGIC %python
-- MAGIC result_df = spark.sql("""
-- MAGIC SELECT
-- MAGIC     stores.timezone as region,
-- MAGIC     item_categories.category_name AS category,
-- MAGIC     SUM(unit_qty * item_master.item_price) AS net_sales
-- MAGIC FROM scans
-- MAGIC INNER JOIN stores ON scans.store_id = stores.store_id
-- MAGIC INNER JOIN item_master ON scans.item_upc = item_master.item_upc
-- MAGIC INNER JOIN item_categories ON item_master.category_code = item_categories.category_code
-- MAGIC GROUP BY 1, 2
-- MAGIC """)
-- MAGIC result_df.show()

-- COMMAND ----------

-- MAGIC %python
-- MAGIC import matplotlib.pyplot as plt
-- MAGIC from pyspark.sql.functions import col
-- MAGIC
-- MAGIC # Cast DecimalType columns to FloatType
-- MAGIC result_df = result_df.withColumn("net_sales", col("net_sales").cast("float"))
-- MAGIC
-- MAGIC # Convert the result DataFrame to a Pandas DataFrame
-- MAGIC result_pd = result_df.toPandas()
-- MAGIC
-- MAGIC # Aggregate the data by 'category' and 'region', summing the 'net_sales'
-- MAGIC agg_pd = result_pd.groupby(['category', 'region'])['net_sales'].sum().reset_index()
-- MAGIC
-- MAGIC # Convert sum_amount to float
-- MAGIC agg_pd['net_sales'] = agg_pd['net_sales'].astype(float)
-- MAGIC
-- MAGIC # Define a scaling factor to compress the range of bubble sizes
-- MAGIC scaling_factor = 0.001  # Adjust this value as needed
-- MAGIC
-- MAGIC # Apply the scaling factor to the 'net_sales' values
-- MAGIC agg_pd['scaled_net_sales'] = agg_pd['net_sales'] * scaling_factor
-- MAGIC
-- MAGIC # Create the bubble plot
-- MAGIC plt.figure(figsize=(12, 8))
-- MAGIC scatter = plt.scatter(agg_pd['region'], agg_pd['category'], s=agg_pd['scaled_net_sales'], c=agg_pd['net_sales'], cmap='viridis', alpha=0.5)
-- MAGIC
-- MAGIC # Add a color bar
-- MAGIC plt.colorbar(scatter, label='Net Sales')
-- MAGIC
-- MAGIC # Slant the timezone labels for better readability
-- MAGIC plt.xticks(rotation=45)
-- MAGIC
-- MAGIC plt.xlabel('Region')
-- MAGIC plt.ylabel('Category')
-- MAGIC plt.title('Bubble Plot of Net Sales by Category and Region')
-- MAGIC plt.show()
-- MAGIC
